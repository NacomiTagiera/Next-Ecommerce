{
	"$schema": "https://json.schemastore.org/eslintrc.json",
	"plugins": ["@typescript-eslint", "import", "simple-import-sort"],
	"parserOptions": {
		"project": "tsconfig.json"
	},
	"extends": [
		"plugin:@typescript-eslint/recommended",
		"plugin:@typescript-eslint/recommended-requiring-type-checking",
		"plugin:import/recommended",
		"plugin:import/typescript",
		"prettier",
		"next/core-web-vitals"
	],
	"rules": {
		// no let exports
		"import/no-mutable-exports": "error",

		"simple-import-sort/imports": "error",
		"simple-import-sort/exports": "error",
		"import/first": "error",
		"import/no-duplicates": ["error", { "prefer-inline": true }],
		"import/no-cycle": "error",
		"import/no-default-export": "error",

		// allow {} even though it's unsafe but comes handy
		"@typescript-eslint/ban-types": [
			"error",
			{
				"types": {
					"{}": false
				}
			}
		],

		"@typescript-eslint/consistent-type-imports": [
			"error",
			{
				"prefer": "type-imports",
				"fixStyle": "inline-type-imports",
				"disallowTypeAnnotations": false
			}
		],

		// false negatives
		"import/namespace": ["off"],

		// allow empty interfaces
		"no-empty-pattern": "off",
		"@typescript-eslint/no-empty-interface": "off",

		// allow empty functions
		"@typescript-eslint/no-empty-function": "off",

		// I sometimes use async functions that don't await anything
		"@typescript-eslint/require-await": "off",

		// make sure to `await` inside try…catch
		"@typescript-eslint/return-await": ["error", "in-try-catch"],

		// allow unused vars prefixed with `_`
		"@typescript-eslint/no-unused-vars": [
			"error",
			{ "argsIgnorePattern": "^_", "varsIgnorePattern": "^_" }
		],

		// numbers and booleans are fine in template strings
		"@typescript-eslint/restrict-template-expressions": [
			"error",
			{ "allowNumber": true, "allowBoolean": true }
		],

		// Server Actions `action={…}`
		"@typescript-eslint/no-misused-promises": [
			"error",
			{
				"checksVoidReturn": {
					"attributes": false
				}
			}
		],
		"no-restricted-imports": [
			"error",
			{
				"name": "next/router",
				"message": "Please use next/navigation instead"
			}
		]
	},
	"overrides": [
		{
			"files": ["src/app/**/*.ts?(x)"],
			"rules": {
				"import/no-default-export": "off"
			}
		},
		{
			"files": ["src/**/*.ts?(x)"],
			"rules": {
				"simple-import-sort/imports": [
					"error",
					{
						"groups": [
							["^react", "^@?\\w"],
							["^next", "^@?\\w"],
							["^(@|components|hooks|lib|types)(/.*|$)"],
							["^\\u0000"],
							["^\\.\\.(?!/?$)", "^\\.\\./?$"],
							["^\\./(?=.*/)(?!/?$)", "^\\.(?!/?$)", "^\\./?$"],
							["^.+\\.s?css$"]
						]
					}
				]
			}
		}
	],
	"ignorePatterns": ["*.js", "*.jsx"]
}
